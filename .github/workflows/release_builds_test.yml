name: Release builds

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 0.1.2)'
        required: true
      auto_detect_platforms:
        description: 'Auto-detect all platforms from export_presets.cfg'
        required: false
        default: true
        type: boolean
      manual_platforms:
        description: 'Manual platform selection (comma-separated, only used if auto-detect is false)'
        required: false
        default: 'Windows Desktop,Linux/X11,macOS,Android arm32,Android arm64,Web'
        type: string
      upload_to_itch:
        description: 'Upload exported files to itch.io?'
        required: false
        default: true
        type: boolean
      auto_generate_changelog:
        description: 'Auto-generate changelog from commits'
        required: false
        default: false
        type: boolean
      mark_prerelease:
        description: 'Mark as prerelease'
        required: true
        default: false
        type: boolean

jobs:
  # Detect platforms from export_presets.cfg
  detect-platforms:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.detect.outputs.platforms }}
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Detect or parse platforms
        id: detect
        run: |
          if [ "${{ inputs.auto_detect_platforms }}" == "true" ]; then
            echo "Auto-detecting platforms from export_presets.cfg..."
            
            if [ ! -f "export_presets.cfg" ]; then
              echo "Error: export_presets.cfg not found"
              exit 1
            fi
            
            # Extract preset names from export_presets.cfg
            platforms=$(grep -E '^name="[^"]*"' export_presets.cfg | sed 's/name="\([^"]*\)"/\1/')
            
            # Convert to JSON array for matrix
            platforms_json=$(echo "$platforms" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            
          else
            echo "Using manual platform selection..."
            # Parse comma-separated input into array
            platforms_json=$(echo "${{ inputs.manual_platforms }}" | jq -R -c 'split(",") | map(ltrimstr(" ") | rtrimstr(" "))')
            platforms=$(echo "${{ inputs.manual_platforms }}" | tr ',' '\n')
          fi
          
          echo "Selected platforms:"
          echo "$platforms"
          
          # Create matrix JSON with platform details
          matrix_json='{"platform":['
          first=true
          
          while IFS= read -r platform; do
            if [ -n "$platform" ]; then
              # Determine artifact name based on platform
              artifact_name=""
              case "$platform" in
                *"Windows"*)
                  artifact_name="windows"
                  ;;
                *"Linux/X11 arm64"*|*"Linux arm64"*)
                  artifact_name="linux-arm64"
                  ;;
                *"Linux"*|*"X11"*)
                  artifact_name="linux-x64"
                  ;;
                *"macOS"*|*"Mac"*)
                  artifact_name="macos"
                  ;;
                *"Android x86"*)
                  artifact_name="android-x86"
                  ;;
                *"Android arm32"*)
                  artifact_name="android-arm32"
                  ;;
                *"Android arm64"*)
                  artifact_name="android-arm64"
                  ;;
                *"Web"*|*"HTML"*)
                  artifact_name="web"
                  ;;
                *)
                  # Generic fallback
                  artifact_name=$(echo "$platform" | tr '[:upper:]' '[:lower:]' | tr ' /' '-')
                  ;;
              esac
              
              if [ "$first" = false ]; then
                matrix_json+=','
              fi
              first=false
              
              matrix_json+="{\"name\":\"$platform\",\"artifact_name\":\"$artifact_name\"}"
            fi
          done <<< "$platforms"
          
          matrix_json+=']}'
          
          echo "platforms=$platforms_json" >> $GITHUB_OUTPUT
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

  commit-vercode-changes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version_code: ${{ steps.prev_version.outputs.new_code }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Previous Version Code
        id: prev_version
        run: |
          PREV_CODE=$(grep -o 'version/code=[0-9]*' export_presets.cfg | head -1 | cut -d= -f2)
          NEW_CODE=$((PREV_CODE + 10))
          echo "prev_code=${PREV_CODE}" >> $GITHUB_OUTPUT
          echo "new_code=${NEW_CODE}" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        uses: mlm-games/release-notes-generator@main
        with:
          version: ${{ inputs.version_name }}
          changelog-path: 'CHANGELOG.md'
          version-file-path: './fastlane/metadata/android/en-US/changelogs/${{ steps.prev_version.outputs.new_code }}.txt'
          version-code: '${{ steps.prev_version.outputs.new_code }}'
          exclude-patterns: 'Update ,Merge ,Auto-generate changelog'
          auto-commit: 'true'
          commit-message: 'Update release notes for v{{version}}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Version Information
        run: |
          echo "Previous version code: ${{ steps.prev_version.outputs.prev_code }}"
          echo "New version code: ${{ steps.prev_version.outputs.new_code }}"

          VERSION_CODE=${{ steps.prev_version.outputs.new_code }}

          # Update version name
          sed -i "/version\/name=\".*\"/s//version\/name=\"${{ inputs.version_name }}\"/" export_presets.cfg

          # Update version codes
          sed -i "0,/version\/code=[0-9]*/s//version\/code=$VERSION_CODE/" export_presets.cfg
          sed -i "0,/version\/code=[0-9]*/! {0,/version\/code=[0-9]*/s//version\/code=$((VERSION_CODE+1))/}" export_presets.cfg
          sed -i "$(grep -n 'version/code=' export_presets.cfg | tail -n1 | cut -d: -f1),\$s/version\/code=[0-9]*/version\/code=$((VERSION_CODE+2))/" export_presets.cfg

      - name: Commit Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions"
          git pull
          git add export_presets.cfg
          git add ./fastlane/metadata/android/en-US/changelogs/${{ steps.prev_version.outputs.new_code }}.txt || true
          git commit -m "Update version to ${{ inputs.version_name }} (${{ steps.prev_version.outputs.new_code }})"
          git push

  prepare-and-build:
    needs: [detect-platforms, commit-vercode-changes]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix: ${{ fromJson(needs.detect-platforms.outputs.matrix) }}
      fail-fast: false
      max-parallel: 1

    steps:
      - uses: actions/checkout@v4

      - name: git pull
        shell: bash
        run: |
          git pull

      - name: Build
        id: build
        uses: mlm-games/godot-build-action@main
        with:
          EXPORT_PRESET_NAME: ${{ matrix.platform.name }}
          ITCH_USER_SLASH_GAME: "ragebreaker/just-keep-chasing"
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
          RELEASE_KEYSTORE: ${{ secrets.RELEASE_KEYSTORE }}
          KEYSTORE_PASSPHRASE: ${{ secrets.KEYSTORE_PASSPHRASE }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          BUTLER_UPLOAD: ${{ inputs.upload_to_itch }}
        continue-on-error: true

      - name: Prepare artifacts
        id: prepare
        shell: bash
        run: |
          cd ${{ github.workspace }}/builds/
          
          # Find the exported file
          exported_file=$(find . -type f -name "*" | grep -v "SHA256SUMS.txt" | head -1)
          
          if [ -n "$exported_file" ]; then
            # Determine final artifact name with version
            filename=$(basename "$exported_file")
            
            # Handle web builds specially
            if [[ "${{ matrix.platform.name }}" == *"Web"* ]] || [[ "${{ matrix.platform.name }}" == *"HTML"* ]]; then
              # For web builds, create a zip
              web_dir=$(dirname "$exported_file")
              cd "$web_dir"
              zip -r "../${{ matrix.platform.artifact_name }}-v${{ inputs.version_name }}.zip" .
              cd ..
              artifact_file="${{ matrix.platform.artifact_name }}-v${{ inputs.version_name }}.zip"
            else
              # For other platforms, rename with version
              if [[ "$filename" == *.* ]]; then
                extension="${filename##*.}"
                artifact_file="${{ matrix.platform.artifact_name }}-v${{ inputs.version_name }}.${extension}"
              else
                # No extension (like Linux binaries)
                artifact_file="${{ matrix.platform.artifact_name }}-v${{ inputs.version_name }}"
              fi
              mv "$exported_file" "$artifact_file"
            fi
            
            echo "artifact_file=$artifact_file" >> $GITHUB_OUTPUT
            echo "artifact_path=${{ github.workspace }}/builds/$artifact_file" >> $GITHUB_OUTPUT
          fi
          
          git pull

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact_name }}-build
          path: ${{ steps.prepare.outputs.artifact_path }}

      - name: Generate SHA256 checksums
        shell: bash
        run: |
          cd ${{ github.workspace }}/builds/

          # Create checksums file
          echo "# SHA256 Checksums for ${{ matrix.platform.name }}" > SHA256SUMS.txt
          echo "Generated on $(date)" >> SHA256SUMS.txt
          echo "" >> SHA256SUMS.txt

          # Calculate checksums for each file
          for file in *; do
            if [ -f "$file" ] && [ "$file" != "SHA256SUMS.txt" ]; then
              HASH=$(sha256sum "$file" | cut -d ' ' -f 1)
              echo "$HASH  $file" >> SHA256SUMS.txt
              echo "File: $file"
              echo "SHA256: $HASH"
            fi
          done
        continue-on-error: true

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.prepare.outputs.artifact_path }}
          name: ${{ inputs.version_name }}
          tag_name: ${{ inputs.version_name }}
          body_path: ./fastlane/metadata/android/en-US/changelogs/${{ needs.commit-vercode-changes.outputs.new_version_code }}.txt
          prerelease: ${{ inputs.mark_prerelease }}
          generate_release_notes: true
        continue-on-error: true

  # Summary job
  summary:
    if: always()
    needs: [detect-platforms, prepare-and-build]
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## Release Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ inputs.version_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ inputs.mark_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Upload to itch.io**: ${{ inputs.upload_to_itch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform Detection**: ${{ inputs.auto_detect_platforms && 'Automatic' || 'Manual' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Build Platforms" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.auto_detect_platforms }}" == "true" ]; then
            echo "Platforms were automatically detected from export_presets.cfg" >> $GITHUB_STEP_SUMMARY
          else
            echo "Platforms were manually specified" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.prepare-and-build.result }}" == "success" ]; then
            echo "✅ All builds completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Some builds may have failed (check individual job logs)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release" >> $GITHUB_STEP_SUMMARY
          echo "GitHub Release: [${{ inputs.version_name }}](https://github.com/${{ github.repository }}/releases/tag/${{ inputs.version_name }})" >> $GITHUB_STEP_SUMMARY
