name: Release builds

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 0.1.2)'
        required: true
      auto_detect_platforms:
        description: 'Auto-detect all platforms from export_presets.cfg'
        required: false
        default: true
        type: boolean
      manual_platforms:
        description: 'Manual platform selection (comma-separated, only used if auto-detect is false)'
        required: false
        default: 'Windows Desktop,Linux/X11,macOS,Android,Web'
        type: string
      upload_to_itch:
        description: 'Upload exported files to itch.io?'
        required: false
        default: true
        type: boolean
      auto_generate_changelog:
        description: 'Auto-generate changelog from commits'
        required: false
        default: false
        type: boolean
      mark_prerelease:
        description: 'Mark as prerelease'
        required: true
        default: false
        type: boolean

jobs:
  # Detect platforms from export_presets.cfg
  detect-platforms:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.detect.outputs.platforms }}
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Detect or parse platforms
        id: detect
        run: |
          if [ "${{ inputs.auto_detect_platforms }}" == "true" ]; then
            echo "Auto-detecting platforms from export_presets.cfg..."
            
            if [ ! -f "export_presets.cfg" ]; then
              echo "Error: export_presets.cfg not found"
              exit 1
            fi
            
            # Parse export_presets.cfg to extract platform info
            python3 - <<'EOF' > platform_matrix.json
import re
import json

with open('export_presets.cfg', 'r') as f:
    content = f.read()

# Find all presets
preset_pattern = r'\[preset\.(\d+)\].*?(?=\[preset\.\d+\]|\Z)'
presets = re.findall(preset_pattern, content, re.DOTALL)

platforms = []
matrix_entries = []

for i, preset_content in enumerate(presets):
    # Extract name
    name_match = re.search(r'name="([^"]+)"', preset_content)
    if not name_match:
        continue
    
    name = name_match.group(1)
    
    # Extract export path
    export_path_match = re.search(r'export_path="([^"]+)"', preset_content)
    export_path = export_path_match.group(1) if export_path_match else ""
    
    # Skip if no export path
    if not export_path:
        continue
    
    # Extract just the filename from the export path
    export_filename = export_path.split('/')[-1]
    
    # Determine artifact name based on platform name
    artifact_name = ""
    is_web = False
    
    if "Windows" in name:
        artifact_name = "windows"
    elif "Linux/X11 arm64" in name or "Linux arm64" in name:
        artifact_name = "linux-arm64"
    elif "Linux" in name or "X11" in name:
        artifact_name = "linux-x64"
    elif "macOS" in name or "Mac" in name:
        artifact_name = "macos"
    elif "Android x86" in name:
        artifact_name = "android-x86"
    elif "Android arm32" in name:
        artifact_name = "android-arm32"
    elif "Android arm64" in name:
        artifact_name = "android-arm64"
    elif "Android" in name:
        artifact_name = "android"
    elif "Web" in name or "HTML" in name:
        artifact_name = "web"
        is_web = True
    else:
        artifact_name = name.lower().replace(' ', '-').replace('/', '-')
    
    platforms.append(name)
    matrix_entries.append({
        "name": name,
        "artifact_name": artifact_name,
        "export_path": export_path,
        "export_filename": export_filename,
        "is_web": is_web
    })

# Output the results
output = {
    "platforms": platforms,
    "matrix": {"platform": matrix_entries}
}

print(json.dumps(output, indent=2))
EOF
            
            # Extract the results
            platforms_json=$(cat platform_matrix.json | jq -c '.platforms')
            matrix_json=$(cat platform_matrix.json | jq -c '.matrix')
            
            echo "Detected platforms:"
            cat platform_matrix.json | jq '.platforms[]'
            
          else
            echo "Using manual platform selection..."
            # For manual selection, we need to match against export_presets.cfg
            platforms_array=$(echo "${{ inputs.manual_platforms }}" | tr ',' '\n' | sed 's/^ *//;s/ *$//')
            
            # Create matrix for manual platforms
            python3 - <<'EOF' > platform_matrix.json
import re
import json
import sys

manual_platforms = """$platforms_array""".strip().split('\n')

with open('export_presets.cfg', 'r') as f:
    content = f.read()

# Find all presets
preset_pattern = r'\[preset\.(\d+)\].*?(?=\[preset\.\d+\]|\Z)'
presets = re.findall(preset_pattern, content, re.DOTALL)

platforms = []
matrix_entries = []

for platform_name in manual_platforms:
    # Find matching preset
    for preset_content in presets:
        name_match = re.search(r'name="([^"]+)"', preset_content)
        if not name_match:
            continue
        
        preset_name = name_match.group(1)
        
        # Check if this preset matches the manual platform
        if platform_name.strip() == preset_name:
            # Extract export path
            export_path_match = re.search(r'export_path="([^"]+)"', preset_content)
            export_path = export_path_match.group(1) if export_path_match else ""
            
            if not export_path:
                continue
            
            export_filename = export_path.split('/')[-1]
            
            # Determine artifact name
            artifact_name = ""
            is_web = False
            
            if "Windows" in preset_name:
                artifact_name = "windows"
            elif "Linux/X11 arm64" in preset_name:
                artifact_name = "linux-arm64"
            elif "Linux" in preset_name:
                artifact_name = "linux-x64"
            elif "macOS" in preset_name:
                artifact_name = "macos"
            elif "Android x86" in preset_name:
                artifact_name = "android-x86"
            elif "Android" in preset_name:
                artifact_name = "android"
            elif "Web" in preset_name:
                artifact_name = "web"
                is_web = True
            else:
                artifact_name = preset_name.lower().replace(' ', '-').replace('/', '-')
            
            platforms.append(preset_name)
            matrix_entries.append({
                "name": preset_name,
                "artifact_name": artifact_name,
                "export_path": export_path,
                "export_filename": export_filename,
                "is_web": is_web
            })
            break

output = {
    "platforms": platforms,
    "matrix": {"platform": matrix_entries}
}

print(json.dumps(output, indent=2))
EOF
            
            platforms_json=$(cat platform_matrix.json | jq -c '.platforms')
            matrix_json=$(cat platform_matrix.json | jq -c '.matrix')
          fi
          
          echo "platforms=$platforms_json" >> $GITHUB_OUTPUT
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
          
          # Clean up
          rm -f platform_matrix.json

  commit-vercode-changes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version_code: ${{ steps.prev_version.outputs.new_code }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Previous Version Code
        id: prev_version
        run: |
          PREV_CODE=$(grep -o 'version/code=[0-9]*' export_presets.cfg | head -1 | cut -d= -f2)
          NEW_CODE=$((PREV_CODE + 10))
          echo "prev_code=${PREV_CODE}" >> $GITHUB_OUTPUT
          echo "new_code=${NEW_CODE}" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        uses: mlm-games/release-notes-generator@main
        with:
          version: ${{ inputs.version_name }}
          changelog-path: 'CHANGELOG.md'
          version-file-path: './fastlane/metadata/android/en-US/changelogs/${{ steps.prev_version.outputs.new_code }}.txt'
          version-code: '${{ steps.prev_version.outputs.new_code }}'
          exclude-patterns: 'Update ,Merge ,Auto-generate changelog'
          auto-commit: 'true'
          commit-message: 'Update release notes for v{{version}}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Version Information
        run: |
          echo "Previous version code: ${{ steps.prev_version.outputs.prev_code }}"
          echo "New version code: ${{ steps.prev_version.outputs.new_code }}"

          VERSION_CODE=${{ steps.prev_version.outputs.new_code }}

          # Update version name
          sed -i "/version\/name=\".*\"/s//version\/name=\"${{ inputs.version_name }}\"/" export_presets.cfg

          # Update version codes for Android presets
          # This updates each Android preset's version code incrementally
          python3 - <<'EOF'
import re

with open('export_presets.cfg', 'r') as f:
    content = f.read()

# Find all Android presets and update their version codes
preset_pattern = r'(\[preset\.\d+\].*?platform="Android".*?)version/code=(\d+)'
matches = list(re.finditer(preset_pattern, content, re.DOTALL))

version_code = ${{ steps.prev_version.outputs.new_code }}

for i, match in enumerate(matches):
    old_text = match.group(0)
    new_text = match.group(1) + f'version/code={version_code + i}'
    content = content.replace(old_text, new_text)

with open('export_presets.cfg', 'w') as f:
    f.write(content)
EOF

      - name: Commit Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions"
          git pull
          git add export_presets.cfg
          git add ./fastlane/metadata/android/en-US/changelogs/${{ steps.prev_version.outputs.new_code }}.txt || true
          git commit -m "Update version to ${{ inputs.version_name }} (${{ steps.prev_version.outputs.new_code }})"
          git push

  prepare-and-build:
    needs: [detect-platforms, commit-vercode-changes]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix: ${{ fromJson(needs.detect-platforms.outputs.matrix) }}
      fail-fast: false
      max-parallel: 1

    steps:
      - uses: actions/checkout@v4

      - name: git pull
        shell: bash
        run: |
          git pull

      - name: Build
        id: build
        uses: mlm-games/godot-build-action@main
        with:
          EXPORT_PRESET_NAME: ${{ matrix.platform.name }}
          ITCH_USER_SLASH_GAME: "ragebreaker/burger-bang"
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
          RELEASE_KEYSTORE: ${{ secrets.RELEASE_KEYSTORE }}
          KEYSTORE_PASSPHRASE: ${{ secrets.KEYSTORE_PASSPHRASE }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          BUTLER_UPLOAD: ${{ inputs.upload_to_itch }}
        continue-on-error: true

      - name: Prepare artifacts
        id: prepare
        shell: bash
        run: |
          cd ${{ github.workspace }}/builds/
          
          echo "Looking for exported file: ${{ matrix.platform.export_filename }}"
          echo "Expected in path: ${{ matrix.platform.export_path }}"
          echo "Contents of builds directory:"
          find . -type f -name "*" | head -20
          
          # Initialize variables
          artifact_file=""
          artifact_path=""
          
          # Handle web exports specially
          if [ "${{ matrix.platform.is_web }}" == "true" ]; then
            echo "Processing web export..."
            
            # Web exports create a directory, not a single file
            if [ -d "web" ] && [ "$(ls -A web)" ]; then
              echo "Found web directory, creating zip..."
              cd web
              zip -r "../${{ matrix.platform.artifact_name }}-v${{ inputs.version_name }}.zip" .
              cd ..
              artifact_file="${{ matrix.platform.artifact_name }}-v${{ inputs.version_name }}.zip"
              artifact_path="${{ github.workspace }}/builds/$artifact_file"
            else
              echo "Warning: No web directory found"
            fi
          else
            # For non-web platforms, look for the specific exported file
            # The export path might include subdirectories, so we need to handle that
            export_filename="${{ matrix.platform.export_filename }}"
            
            # Try to find the exact file first
            if [ -f "$export_filename" ]; then
              exported_file="./$export_filename"
            else
              # If not found, search for it
              exported_file=$(find . -name "$export_filename" -type f | head -1)
            fi
            
            if [ -n "$exported_file" ] && [ -f "$exported_file" ]; then
              echo "Found exported file: $exported_file"
              
              # Determine final artifact name with version
              filename=$(basename "$exported_file")
              
              # Extract extension if present
              if [[ "$filename" == *.* ]]; then
                extension="${filename##*.}"
                artifact_file="${{ matrix.platform.artifact_name }}-v${{ inputs.version_name }}.${extension}"
              else
                # No extension (like Linux binaries)
                artifact_file="${{ matrix.platform.artifact_name }}-v${{ inputs.version_name }}"
              fi
              
              # Copy the file to the new name
              cp "$exported_file" "$artifact_file"
              artifact_path="${{ github.workspace }}/builds/$artifact_file"
            else
              echo "Warning: Could not find exported file: $export_filename"
            fi
          fi
          
          # Output results
          if [ -n "$artifact_file" ] && [ -f "$artifact_file" ]; then
            echo "artifact_file=$artifact_file" >> $GITHUB_OUTPUT
            echo "artifact_path=$artifact_path" >> $GITHUB_OUTPUT
            echo "success=true" >> $GITHUB_OUTPUT
            echo "Successfully prepared artifact: $artifact_file"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "Failed to prepare artifact for ${{ matrix.platform.name }}"
          fi
          
          git pull

      - name: Upload Artifact
        if: steps.prepare.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact_name }}-build
          path: ${{ steps.prepare.outputs.artifact_path }}

      - name: Generate SHA256 checksums
        if: steps.prepare.outputs.success == 'true'
        shell: bash
        run: |
          cd ${{ github.workspace }}/builds/

          # Create checksums file
          echo "# SHA256 Checksums for ${{ matrix.platform.name }}" > SHA256SUMS.txt
          echo "Generated on $(date)" >> SHA256SUMS.txt
          echo "" >> SHA256SUMS.txt

          # Calculate checksum for the artifact
          if [ -f "${{ steps.prepare.outputs.artifact_file }}" ]; then
            HASH=$(sha256sum "${{ steps.prepare.outputs.artifact_file }}" | cut -d ' ' -f 1)
            echo "$HASH  ${{ steps.prepare.outputs.artifact_file }}" >> SHA256SUMS.txt
            echo "SHA256: $HASH"
          fi

      - name: Upload to Release
        if: steps.prepare.outputs.success == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.prepare.outputs.artifact_path }}
          name: ${{ inputs.version_name }}
          tag_name: ${{ inputs.version_name }}
          body_path: ./fastlane/metadata/android/en-US/changelogs/${{ needs.commit-vercode-changes.outputs.new_version_code }}.txt
          prerelease: ${{ inputs.mark_prerelease }}
          generate_release_notes: true
        continue-on-error: true

  # Summary job
  summary:
    if: always()
    needs: [detect-platforms, prepare-and-build]
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## Release Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ inputs.version_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ inputs.mark_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Upload to itch.io**: ${{ inputs.upload_to_itch }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform Detection**: ${{ inputs.auto_detect_platforms && 'Automatic' || 'Manual' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Build Platforms" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.auto_detect_platforms }}" == "true" ]; then
            echo "Platforms were automatically detected from export_presets.cfg" >> $GITHUB_STEP_SUMMARY
          else
            echo "Platforms were manually specified" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.prepare-and-build.result }}" == "success" ]; then
            echo "✅ All builds completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Some builds may have failed (check individual job logs)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release" >> $GITHUB_STEP_SUMMARY
          echo "GitHub Release: [${{ inputs.version_name }}](https://github.com/${{ github.repository }}/releases/tag/${{ inputs.version_name }})" >> $GITHUB_STEP_SUMMARY
